name: Run ThreadSanitizer

on:
  push:

jobs:
  run-tsan:
    name: '${{ matrix.os }}'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04]

    steps:
      - name: Check out repository
        uses: actions/checkout@v2 
        with:
          ref: aeb660ba58b89b8f9eb05cc1c81d9aad7d66946e

      - name: Install dependencies for project (Linux)
        if: runner.os == 'Linux'
        run: | 
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          
      - name: Build repository (Linux)
        if: runner.os == 'Linux'
        run: | 
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig
          make download -j8

      - name: Install ThreadSanitizer dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y clang-14 libclang-14-dev llvm-14 llvm-14-dev llvm-14-tools llvm-14-linker-tools
      
      - name: Run Google Thread Sanitizer (source code) (Linux)
        if: runner.os == 'Linux'
        run: |
            #!/bin/bash
            set +e

            files=$(find . -type f)
            TIMEOUT_DURATION=10

            for file in $files; do
                if [[ "$file" == *.c || "$file" == *.cpp ]]; then
                    include_dirs=$(find . -name '*.h' -exec dirname {} + | sort -u | sed 's/^/-I /')
                    if ! timeout 60 clang -I "$include_dirs" -fsanitize=thread -fPIE -pie -O2  -g "$file" -o ./compiled.out > /dev/null 2> /tmp/clang_errors.txt; then
                        exit_code=$?
                        if [ $exit_code -eq 1 ]; then
                            continue
                        fi
                        continue 
                    fi

                    timeout $TIMEOUT_DURATION ./compiled.out
                    rm -f ./compiled.out
                fi
            done
